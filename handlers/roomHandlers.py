from aiogram import F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
import requests
import keyboards.keyboards as kb
from botSettings.createBot import dp, bot
from rooms.createManager import manager
from handlers.mainHandlers import cancel, cancelFromEnterPassword

class RoomStates(StatesGroup):
    waiting_for_room = State()
    in_room = State()


@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
async def createRoom(message: Message):
    roomId = manager.createRoom(message.from_user.id)
    await message.answer(f"–í–æ—Ç id —Ç–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã: {roomId}\n–ü–æ–¥–æ–∂–¥–∏ –¥—Ä—É–∑–µ–π", reply_markup=kb.preStartMenu)
    manager.joinToRoom(roomId, message.from_user.id)   # –¥–æ–±–∞–≤–∏–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞–ª –∫–æ–º–Ω–∞—Ç—É —É –Ω–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è id –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –µ—Å—Ç—å –æ–Ω –±—ã–ª -1


@dp.message(F.text == "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
async def connectToRoom(message: Message, state: FSMContext):
    # —Ç—É—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await message.answer("–°–∫–∞–∂–∏ –ø–∞—Ä–æ–ª—å)))", reply_markup=kb.enterPasswordMenu)
    await state.set_state(RoomStates.waiting_for_room)


@dp.message(RoomStates.waiting_for_room)
async def process_room_id(message: Message, state: FSMContext):
    room_id = int(message.text.strip())
    if manager.checkRoomId(room_id) == 1:
        manager.joinToRoom(room_id, message.from_user.id)

        updated_users = [user.getUserId() for user in manager.getRoomById(room_id).roomMembers]
        if len(updated_users) > 1:
            try:
                response = requests.post("http://match_api:4450/push", params={
                    "status": "new room",  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å
                    "room": room_id,
                    "users": updated_users
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã: {e}")

        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}!\n–û–∂–∏–¥–∞–π—Ç–µ", reply_markup=kb.menuForConnectedUsers)
        await state.set_state(RoomStates.in_room)
        creator_id = manager.getCreatorId(room_id)

        await bot.send_message(creator_id,
                               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ!")
    else:
        await message.answer("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É.",
                             reply_markup=kb.roomMenu)
        await state.clear()

@dp.message(F.text == "üö™ –£–π—Ç–∏")
async def leave(message: Message, state: FSMContext):
    curUser = manager.getUserById(message.from_user.id)
    room = manager.getRoomById(curUser.getRoomNumber())
    username = message.from_user.username

    manager.deleteUser(message.from_user.id)
    manager.deleteUserFromRoom(curUser, room)

    for user in room.roomMembers:
        userId = user.getUserId()
        await bot.send_message(userId, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!")

    await message.answer(f"–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É {room.getRoomId()}", reply_markup=kb.startMenu)
    await state.clear()

def register_handlers(dp: Dispatcher):
    dp.message.register(createRoom, F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
    dp.message.register(connectToRoom, F.text == "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
    dp.message.register(leave, F.text == "üö™ –£–π—Ç–∏")
    dp.message.register(cancelFromEnterPassword, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
    dp.message.register(process_room_id, RoomStates.waiting_for_room)
from aiogram import F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message

from api_gateway.film_service import get_recommended_film_with_genre, get_kinopoisk_id_by_title, get_film_data
from api_gateway.film_service import get_recommended_films
from botSettings.createBot import dp, bot
from aiogram.fsm.state import StatesGroup, State
import keyboards.keyboards as kb
from handlers.mainHandlers import cancelForSearch, cancel
from rooms.createManager import manager

class FilmSearchState(StatesGroup):   # –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞, —Ç–∏–ø–∞ –æ–Ω –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞
    waiting_for_title = State()

class FilmRecommendationState(StatesGroup): # –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ñ–∏–ª—å–º—ã
    recommendation = State()

class FilmGenreChoiceState(StatesGroup): # –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
    choosing_genre = State()

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º")       # –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞
async def ask_for_title(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞", reply_markup=kb.searchMenu)
    await state.set_state(FilmSearchState.waiting_for_title)

@dp.message(FilmSearchState.waiting_for_title)  # –∑–¥–µ—Å—å –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
async def film_info(message: Message, state: FSMContext):
    title = message.text.strip()

    kinopoisk_id = get_kinopoisk_id_by_title(title) # —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º id —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if kinopoisk_id:
        film_data = get_film_data(kinopoisk_id) # –ø–æ—Ç–æ–º –ø–æ —ç—Ç–æ–º—É id –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º —Ñ–∏–ª—å–º

        if film_data:
            name = film_data.get("name")
            year = film_data.get("year")
            genre = film_data.get("genre")
            rating = film_data.get("rating")
            description = film_data.get("description")
            webUrl = film_data.get("webUrl")
            poster_url = film_data.get("poster_url")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
            text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ì–æ–¥: {year}\n–ñ–∞–Ω—Ä: {genre}\n–†–µ–π—Ç–∏–Ω–≥: {rating}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {webUrl}"
            if poster_url:
                if len(text) > 1024:
                    await message.answer_photo(poster_url,
                                               f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ì–æ–¥: {year}\n–ñ–∞–Ω—Ä: {genre}\n–†–µ–π—Ç–∏–Ω–≥: {rating}")
                    await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {webUrl}", reply_markup=kb.searchMenu)
                else:
                    await message.answer_photo(poster_url, caption=text, reply_markup=kb.searchMenu)
            else:
                await message.answer(f"–ü–æ—Å—Ç–µ—Ä –¥–ª—è —Ñ–∏–ª—å–º–∞ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {webUrl}")
        else:
            await message.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

async def send_room_film(message: Message, state: FSMContext, room, userId):  # –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    film = room.getCurrentFilmForUser(userId)

    if not film:
        await message.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ñ–∏–ª—å–º—ã!")
        return

    poster_url = film["poster_url"]
    name = film["name"]
    year = film["year"]
    genre = film["genre"]
    rating = film["rating"]
    webUrl = film["webUrl"]
    description = film["description"]

    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ì–æ–¥: {year}\n–ñ–∞–Ω—Ä: {genre}\n–†–µ–π—Ç–∏–Ω–≥: {rating}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {webUrl}"

    if poster_url:
        if len(text) > 1024:
            await bot.send_photo(userId, poster_url, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ì–æ–¥: {year}\n–ñ–∞–Ω—Ä: {genre}\n–†–µ–π—Ç–∏–Ω–≥: {rating}")
            await bot.send_message(userId, f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {webUrl}", reply_markup=kb.likeDislikeMenu)
        else:
            await bot.send_photo(userId, poster_url, caption=text, reply_markup=kb.likeDislikeMenu)
    else:
        await bot.send_message(userId, text, reply_markup=kb.likeDislikeMenu)

    room.nextFilmForUser(userId)


@dp.message(F.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–±–æ—Ä")   # –∑–¥–µ—Å—å –∑–∞–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
async def start_recommendation(message: Message, state: FSMContext):
    user = manager.getUserById(message.from_user.id)
    room = manager.getRoomById(user.getRoomNumber())

    if not room.films:
        room.setFilms(get_recommended_films(limit=10))

    for curUser in room.roomMembers:
        userId = curUser.getUserId()

        # —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        individual_state = FSMContext(
            storage=state.storage,
            key=StorageKey(
                bot_id=bot.id,
                chat_id=userId,
                user_id=userId
            )
        )
        await individual_state.set_state(FilmRecommendationState.recommendation)
        await send_room_film(message, individual_state, room, userId)



@dp.message(FilmRecommendationState.recommendation)  # –∑–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ñ–∏–ª—å–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π
async def rate_film(message: Message, state: FSMContext):
    user = manager.getUserById(message.from_user.id)
    room = manager.getRoomById(user.getRoomNumber())

    lastIndex = room.userIndex.get(user.userId, 1) - 1
    if lastIndex < 0 or lastIndex >= len(room.films):
        return

    film = room.films[lastIndex]
    film_name = film["name"]

    if message.text == "‚ù§Ô∏è":
        await message.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —Ñ–∏–ª—å–º—É: {film_name}")
    elif message.text == "üëé":
        await message.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ —Ñ–∏–ª—å–º—É: {film_name}")
    else:
        return

    await send_room_film(message, state, room, message.from_user.id)


@dp.message(F.text == "üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä")
async def choose_genre(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=kb.genreMenu)
    await state.set_state(FilmGenreChoiceState.choosing_genre)

@dp.message(FilmGenreChoiceState.choosing_genre)
async def start_recommendation_with_genre(message: Message, state: FSMContext):
    genre = message.text.strip()
    await message.answer(f"–ü–æ–¥–±–∏—Ä–∞—é —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ: {genre}...")

    films = get_recommended_film_with_genre(limit=10, genre=genre)

    user = manager.getUserById(message.from_user.id)
    room = manager.getRoomById(user.getRoomNumber())

    if not room.films:
        room.setFilms(films)

    for curUser in room.roomMembers:
        userId = curUser.getUserId()

        # —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        individual_state = FSMContext(
            storage=state.storage,
            key=StorageKey(
                bot_id=bot.id,
                chat_id=userId,
                user_id=userId
            )
        )
        await individual_state.set_state(FilmRecommendationState.recommendation)
        await send_room_film(message, individual_state, room, userId)

@dp.message(F.text == "üö™ –£–π—Ç–∏")
async def leave(message: Message, state: FSMContext):
    curUser = manager.getUserById(message.from_user.id)
    room = manager.getRoomById(curUser.getRoomNumber())
    username = message.from_user.username

    manager.deleteUser(message.from_user.id)
    manager.deleteUserFromRoom(curUser, room)

    for user in room.roomMembers:
        userId = user.getUserId()
        await bot.send_message(userId, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!")

    await message.answer(f"–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É {room.getRoomId()}", reply_markup=kb.startMenu)
    await state.clear()

def register_handlers(dp: Dispatcher):
    dp.message.register(choose_genre, F.text == "üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä")
    dp.message.register(leave, F.text == "üö™ –£–π—Ç–∏")
    dp.message.register(cancel, F.text == "üîÑ –û—Ç–º–µ–Ω–∞")
    dp.message.register(cancelForSearch, F.text == "üö´ –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫")
    dp.message.register(start_recommendation_with_genre, FilmGenreChoiceState.choosing_genre)
    dp.message.register(start_recommendation, F.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–±–æ—Ä")
    dp.message.register(ask_for_title, F.text == "üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º")
    dp.message.register(film_info, FilmSearchState.waiting_for_title)
    dp.message.register(rate_film, FilmRecommendationState.recommendation)